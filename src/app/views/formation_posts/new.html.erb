<h1>新規投稿</h1>
<!-- form_for部分 -->

<%= form_with model:@formation_post, url:'/formation_posts', local:true do |f| %>

    <select id="match_schedule">
          <option>対戦カードを選択してください</option>
    </select>

    <h4>タイトル</h4>
    <%= f.text_field :title %>


    <h4>本文</h4>
    <%= f.text_area :body %>

<div>
  <div class="canvas-wrapper">
      <canvas id="canvas" width="300" height="445"></canvas>
  </div>
</div>

<div style="height:490px"></div>

<div>
    <%= f.submit '投稿', class:"btn btn-lg btn-block", id:"save-button" %>
    <%= f.hidden_field :coordinates, value: "" %>
    <%= f.hidden_field :image_url, value: "" %>
    
</div>

<script>
    window.onload = function () {
        // canvas要素を取得
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        // const canvas_back = document.getElementById("canvas-back");
        // const ctx_back = canvas_back.getContext("2d");
        const BB = canvas.getBoundingClientRect();
        //左辺の座標
        const offsetX = BB.left;
        //四角形の上辺の座標
        const offsetY = BB.top;
        const WIDTH = canvas.width;
        const HEIGHT = canvas.height;

        let dragok = false;
        let startX;
        let startY;
        let dataURL = canvas.toDataURL('image/png');
        let isHit = false;
        let drag_rect = null;
        let originalX;
        let originalY;

        // ユニフォーム画像
        const img = new Image();
        img.src = "/images/uniform.png";
        img.onload = () => {
        draw();
        }
        // 背景画像を描画
        const bgImg = new Image();
        bgImg.src = "/images/ground.jpg";
        bgImg.onload = () => {
        draw();
        }

        let rects = [];
        rects.push({
        x: 220,
        y: 90,
        width: 40,
        height: 40,
        fill: "#800080",
        isDragging: false
        });
        rects.push({
        x: 130,
        y: 85,
        width: 40,
        height: 40,
        //fill: "#ff55040,
        isDragging: false
        });
        rects.push({
        x: 45,
        y: 90,
        width: 40,
        height: 40,
        //fill: "#800080",
        isDragging: false
        });
        rects.push({
        x: 85,
        y: 170,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });
        rects.push({
        x: 180,
        y: 170,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });
        rects.push({
        x: 130,
        y: 240,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });
        rects.push({
        x: 100 - 10,
        y: 320,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });
        rects.push({
        x: 180,
        y: 320,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });
        rects.push({
        x: 20,
        y: 280,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });
        rects.push({
        x: 230,
        y: 280,
        width: 40,
        height: 40,
        //fill: "#0c64e8",
        isDragging: false
        });

    draw();

    let url = canvas.toDataURL('image/jpeg');
    document.getElementById("formation_post_image_url").value = url;

    function rect(x, y, w, h) {
      ctx.beginPath();
      ctx.rect(x, y, w, h);
      ctx.closePath();
      ctx.fill();
      // ctx.fillStyle = "rgba(255, 0, 0, 0.1)";
    }
    //アニメーションの各フレームの開始時に必要
    function clear() {
        ctx.clearRect(0, 0, WIDTH, HEIGHT);
    }

    function draw() {
        clear();
        ctx.fillStyle = "#FAF7F8";
        rect(0, 0, WIDTH, HEIGHT);
        ctx.drawImage(bgImg, 0, 0, WIDTH, HEIGHT);
        isHit = false;

        for (let i = 0; i < rects.length; i++) {
          const r = rects[i];
          ctx.fillStyle = r.fill;
          ctx.drawImage(img, r.x, r.y, r.width, r.height);

          if (drag_rect && !r.isDragging) {
            if(
                Math.abs(r.x - drag_rect.x) < r.width/2 + drag_rect.width/2 //横の判定
                &&
                Math.abs(r.y - drag_rect.y) < r.height/2 + drag_rect.height/2 //縦の判定
              ){
                isHit = true;
                ctx.strokeStyle = "red";
                ctx.fillStyle = "transparent";
                ctx.beginPath();
                ctx.rect(r.x, r.y, r.width, r.height);
                ctx.stroke();
              }
            }
        drawText(r)
      }
    }

    function drawText(r)
    {
      //var text = document.getElementById(text_id);
      var value = "テスト"
      //文字のスタイルを指定
      ctx.font = '20px serif';
      ctx.fillStyle = '#404040';
      //文字の配置を指定（左上基準にしたければtop/leftだが、文字の中心座標を指定するのでcenter
      ctx.textBaseline = 'center';
      ctx.textAlign = 'center';
      //座標を指定して文字を描く（座標は画像の中心に）
      var x_text = (r.width / 2);
      var y_text = (r.height / 2);
      ctx.fillText(value, r.x + x_text, r.y + y_text);
    }

    canvas.onmousedown = myDown;

    function myDown(e) {
      e.preventDefault();
      e.stopPropagation();
      //e.clientXはWEB画面全体のx座標（押した箇所のx座標）
      //offsetXはcanvasの左上のx座標
      const mx = parseInt(e.clientX - offsetX);
      const my = parseInt(e.clientY - offsetY);
      //アイコンを押したときのx座標とy座標を記録している
      dragok = false;
      for (let i = 0; i < rects.length; i++) {
        const r = rects[i];
        if (mx > r.x && mx < r.x + r.width && my > r.y && my < r.y + r.height) {
          dragok = true;
          r.isDragging = true;
          drag_rect = r;
          originalX = r.x;
          originalY = r.y;

        }
      }
      //startX,startYに最初アイコンをクリックした時の座標が記録される
      startX = mx;
      startY = my;
    }

    canvas.onmouseup = myUp;
    function myUp(e) {
        e.preventDefault();
        e.stopPropagation();

        dragok = false;

        for (let i = 0; i < rects.length; i++) {
            rects[i].isDragging = false;
        }

        if(isHit){
            //重なっていたら元の位置に戻す
            drag_rect.x = originalX;
            drag_rect.y = originalY;
          }
          isHit = false;
          drag_rect = null;
          draw();

        document.getElementById('formation_post_coordinates').value = JSON.stringify(rects);

        url = canvas.toDataURL('image/jpeg');
        document.getElementById("formation_post_image_url").value = url;
    }

    canvas.onmousemove = myMove;
    function myMove(e) {
        if (dragok) {
          e.preventDefault();
          e.stopPropagation();

          const mx = parseInt(e.clientX - offsetX);
          const my = parseInt(e.clientY - offsetY);

          const dx = mx - startX;
          const dy = my - startY;

          for (let i = 0; i < rects.length; i++) {
            const r = rects[i];
            if (r.isDragging) {
              r.x += dx;
              r.y += dy;

            }
          }

          draw();

          startX = mx;
          startY = my;
        }
      }

  async function callApi() {
    const res = await fetch("http://api.football-data.org/v4/areas/", { mode: "no-cors" });
    console.log(res)
    const users = await res.parse();

    /*
    const res = {
      "count": 272,
      "filters": {},
      "areas": [
          {
              "id": 2000,
              "name": "Afghanistan",
              "countryCode": "AFG",
              "flag": null,
              "parentAreaId": 2014,
              "parentArea": "Asia"
          },
          {
              "id": 2271,
              "name": "Zanzibar",
              "countryCode": "ZAN",
              "flag": null,
              "parentAreaId": 2001,
              "parentArea": "Africa"
          },
          {
              "id": 2272,
              "name": "Zimbabwe",
              "countryCode": "ZIM",
              "flag": null,
              "parentAreaId": 2001,
              "parentArea": "Africa"
          }
      ]

    }
    */
     // selectタグを取得する
    let Element = document.getElementById("match_schedule");
    let option = []
    console.log(users.areas[0].name)

    for (let i = 0; i<users.areas.length; i++) {
      // optionタグを作成する
      let option = document.createElement("option");
      option.value = users.areas[i].name;
      option.innerText = users.areas[i].name;
      Element.appendChild(option);
    }
      console.log(option);
    }
  callApi();
  };
</script>
<% end %>